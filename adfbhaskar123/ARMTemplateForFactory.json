{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfbhaskar123"
		},
		"ls_azSQL_SOURCE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_SOURCE'"
		},
		"ls_azSQL_TARGET_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_TARGET'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scd_type_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployee": {},
									"trgEmployee": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_scd_type_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_SOURCE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_TARGET')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_TARGET_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd_type_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_SOURCE",
								"type": "LinkedServiceReference"
							},
							"name": "srcEmployee"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "trgEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "trgSelect"
						},
						{
							"name": "NewRecords"
						},
						{
							"name": "InsertFlag"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "IsChangedRecords"
						},
						{
							"name": "UpdatedRecords"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          ename as string,",
						"          location as string,",
						"          salary as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT empid, ename, location, salary FROM employee',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> srcEmployee",
						"source(output(",
						"          empid as integer,",
						"          ename as string,",
						"          location as string,",
						"          salary as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT empid, ename, location, salary FROM employee',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> trgEmployee",
						"srcEmployee select(mapColumn(",
						"          src_empid = empid,",
						"          src_ename = ename,",
						"          src_location = location,",
						"          src_salary = salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"trgEmployee select(mapColumn(",
						"          trg_empid = empid,",
						"          trg_ename = ename,",
						"          trg_location = location,",
						"          trg_salary = salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> trgSelect",
						"srcSelect, trgSelect exists(src_empid == trg_empid,",
						"     negate:true,",
						"     broadcast: 'auto')~> NewRecords",
						"NewRecords derive(flag = 0) ~> InsertFlag",
						"InsertFlag select(mapColumn(",
						"          empid = src_empid,",
						"          ename = src_ename,",
						"          location = src_location,",
						"          salary = src_salary,",
						"          flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"srcSelect, trgSelect lookup(src_empid == trg_empid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(ChangedRecordsFlag = iif(src_ename != trg_ename || src_location != trg_location || src_salary != trg_salary, 1,0)) ~> IsChangedRecords",
						"IsChangedRecords filter(ChangedRecordsFlag==1) ~> UpdatedRecords",
						"UpdatedRecords select(mapColumn(",
						"          empid = src_empid,",
						"          ename = src_ename,",
						"          location = src_location,",
						"          salary = src_salary,",
						"          flag = ChangedRecordsFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'employee',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'employee',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['empid'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_TARGET')]"
			]
		}
	]
}