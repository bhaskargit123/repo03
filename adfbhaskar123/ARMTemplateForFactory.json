{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfbhaskar123"
		},
		"ls_azSQL_SOURCE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_SOURCE'"
		},
		"ls_azSQL_TARGET_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_TARGET'"
		},
		"ls_bhaskaradls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_bhaskaradls'"
		},
		"ls_bhaskaradls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bhaskaradls.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_move_data_from_input_to_output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_datafiles_input_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_datafiles_output_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_input_customer')]",
				"[concat(variables('factoryId'), '/datasets/ds_datafiles_output_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scd_type_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcEmployee": {},
									"trgEmployee": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_scd_type_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type_II')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scd_type_II",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcCustomer": {},
									"trgCustomer": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_scd_type_II')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datafiles_input_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_bhaskaradls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.csv",
						"folderPath": "input",
						"fileSystem": "datafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datafiles_output_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_bhaskaradls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customerdata.csv",
						"folderPath": "output",
						"fileSystem": "datafiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_bhaskaradls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_SOURCE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_TARGET')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_TARGET_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_bhaskaradls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_bhaskaradls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_bhaskaradls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/schedulingEveryDayAt8_20AM_IST')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_move_data_from_input_to_output",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-03-06T02:44:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								20
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_move_data_from_input_to_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd_type_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_SOURCE",
								"type": "LinkedServiceReference"
							},
							"name": "srcEmployee"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "trgEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "trgSelect"
						},
						{
							"name": "NewRecords"
						},
						{
							"name": "InsertFlag"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "IsChangedRecords"
						},
						{
							"name": "UpdatedRecords"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          ename as string,",
						"          location as string,",
						"          salary as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT empid, ename, location, salary FROM employee',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> srcEmployee",
						"source(output(",
						"          empid as integer,",
						"          ename as string,",
						"          location as string,",
						"          salary as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT empid, ename, location, salary FROM employee',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> trgEmployee",
						"srcEmployee select(mapColumn(",
						"          src_empid = empid,",
						"          src_ename = ename,",
						"          src_location = location,",
						"          src_salary = salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"trgEmployee select(mapColumn(",
						"          trg_empid = empid,",
						"          trg_ename = ename,",
						"          trg_location = location,",
						"          trg_salary = salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> trgSelect",
						"srcSelect, trgSelect exists(src_empid == trg_empid,",
						"     negate:true,",
						"     broadcast: 'auto')~> NewRecords",
						"NewRecords derive(flag = 0) ~> InsertFlag",
						"InsertFlag select(mapColumn(",
						"          empid = src_empid,",
						"          ename = src_ename,",
						"          location = src_location,",
						"          salary = src_salary,",
						"          flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"srcSelect, trgSelect lookup(src_empid == trg_empid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(ChangedRecordsFlag = iif(src_ename != trg_ename || src_location != trg_location || src_salary != trg_salary, 1,0)) ~> IsChangedRecords",
						"IsChangedRecords filter(ChangedRecordsFlag==1) ~> UpdatedRecords",
						"UpdatedRecords select(mapColumn(",
						"          empid = src_empid,",
						"          ename = src_ename,",
						"          location = src_location,",
						"          salary = src_salary,",
						"          flag = ChangedRecordsFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'employee',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'employee',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['empid'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_TARGET')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd_type_II')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_SOURCE",
								"type": "LinkedServiceReference"
							},
							"name": "srcCustomer"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "trgCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_TARGET",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "trgSelect"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "split1"
						},
						{
							"name": "select1"
						},
						{
							"name": "IsUpdatedOrNot"
						},
						{
							"name": "UpdatedRecords"
						},
						{
							"name": "select2"
						},
						{
							"name": "InsertedAndUpdatedAsInserted"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          CustName as string,",
						"          Location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT CustomerID, CustName, Location FROM customer',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> srcCustomer",
						"source(output(",
						"          CustomerKey as integer,",
						"          CustomerID as integer,",
						"          CustName as string,",
						"          Location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT CustomerKey, CustomerID, CustName, Location FROM customer\\nWHERE EndDate IS NULL',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> trgCustomer",
						"srcCustomer select(mapColumn(",
						"          src_CustomerID = CustomerID,",
						"          src_CustName = CustName,",
						"          src_Location = Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"trgCustomer select(mapColumn(",
						"          CustomerKey,",
						"          trg_CustomerID = CustomerID,",
						"          trg_CustName = CustName,",
						"          trg_Location = Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> trgSelect",
						"srcSelect, trgSelect lookup(src_CustomerID == trg_CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(isNull(CustomerKey),",
						"     !isNull(CustomerKey),",
						"     disjoint: false) ~> split1@(NewRecords, ExistedRecords)",
						"split1@NewRecords select(mapColumn(",
						"          CustomerID = src_CustomerID,",
						"          CustName = src_CustName,",
						"          Location = src_Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@ExistedRecords derive(IsChangedFlag = iif(src_CustName!=trg_CustName || src_Location!=trg_Location, 1, 0)) ~> IsUpdatedOrNot",
						"IsUpdatedOrNot filter(IsChangedFlag==1) ~> UpdatedRecords",
						"UpdatedRecords select(mapColumn(",
						"          CustomerID = src_CustomerID,",
						"          CustName = src_CustName,",
						"          Location = src_Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1, select2 union(byName: true)~> InsertedAndUpdatedAsInserted",
						"InsertedAndUpdatedAsInserted derive(StartDate = currentUTC()) ~> derivedColumn1",
						"UpdatedRecords select(mapColumn(",
						"          CustomerKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(EndDate = currentUTC()) ~> derivedColumn2",
						"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          CustName,",
						"          Location,",
						"          StartDate",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'customer',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustomerKey'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerKey,",
						"          EndDate",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_SOURCE')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_TARGET')]"
			]
		}
	]
}